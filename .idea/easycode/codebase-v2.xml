<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/app/src/androidTest/java/com/lostpawsconnect/dogmobileapp/ExampleInstrumentedTest.java;C:/Development/DogMobileApp/app/src/main/java/com/lostpawsconnect/dogmobileapp/adapters/ReportAdapter.java;C:/Development/DogMobileApp/app/src/main/java/com/lostpawsconnect/dogmobileapp/adapters/SettingsAdapter.java;C:/Development/DogMobileApp/app/src/main/java/com/lostpawsconnect/dogmobileapp/fragments/HomeFragment.java;C:/Development/DogMobileApp/app/src/main/java/com/lostpawsconnect/dogmobileapp/fragments/NotificationFragment.java;C:/Development/DogMobileApp/app/src/main/java/com/lostpawsconnect/dogmobileapp/fragments/RegisterFragment.java;C:/Development/DogMobileApp/app/src/main/java/com/lostpawsconnect/dogmobileapp/fragments/ReportFragment.java;C:/Development/DogMobileApp/app/src/main/java/com/lostpawsconnect/dogmobileapp/fragments/SettingsFragment.java;C:/Development/DogMobileApp/app/src/main/java/com/lostpawsconnect/dogmobileapp/interfaces/ReportListener.java;C:/Development/DogMobileApp/app/src/main/java/com/lostpawsconnect/dogmobileapp/interfaces/SettingsListener.java;C:/Development/DogMobileApp/app/src/main/java/com/lostpawsconnect/dogmobileapp/model/Dogs.java;C:/Development/DogMobileApp/app/src/main/java/com/lostpawsconnect/dogmobileapp/model/Users.java;C:/Development/DogMobileApp/app/src/main/java/com/lostpawsconnect/dogmobileapp/parser/ResponseParser.java;C:/Development/DogMobileApp/app/src/main/java/com/lostpawsconnect/dogmobileapp/preference/UserPref.java;C:/Development/DogMobileApp/app/src/main/java/com/lostpawsconnect/dogmobileapp/python/image_similarity.py;C:/Development/DogMobileApp/app/src/main/java/com/lostpawsconnect/dogmobileapp/services/VRequest.java;C:/Development/DogMobileApp/app/src/main/java/com/lostpawsconnect/dogmobileapp/DashboardActivity.java;C:/Development/DogMobileApp/app/src/main/java/com/lostpawsconnect/dogmobileapp/MainActivity.java;C:/Development/DogMobileApp/app/src/main/java/com/lostpawsconnect/dogmobileapp/MissingDogDetailsActivity.java;C:/Development/DogMobileApp/app/src/main/java/com/lostpawsconnect/dogmobileapp/ReportDogDetailsActivity.java;C:/Development/DogMobileApp/app/src/main/python/plot.py;C:/Development/DogMobileApp/app/src/main/res/drawable/ic_home.xml;C:/Development/DogMobileApp/app/src/main/res/drawable/ic_launcher_background.xml;C:/Development/DogMobileApp/app/src/main/res/drawable/ic_launcher_foreground.xml;C:/Development/DogMobileApp/app/src/main/res/drawable/ic_logout.xml;C:/Development/DogMobileApp/app/src/main/res/drawable/ic_notif.xml;C:/Development/DogMobileApp/app/src/main/res/drawable/ic_register.xml;C:/Development/DogMobileApp/app/src/main/res/drawable/ic_settings.xml;C:/Development/DogMobileApp/app/src/main/res/drawable/paw_prints.xml;C:/Development/DogMobileApp/app/src/main/res/layout/activity_dashboard.xml;C:/Development/DogMobileApp/app/src/main/res/layout/activity_main.xml;C:/Development/DogMobileApp/app/src/main/res/layout/activity_missing_dog_details.xml;C:/Development/DogMobileApp/app/src/main/res/layout/activity_report_dog_details.xml;C:/Development/DogMobileApp/app/src/main/res/layout/fragment_home.xml;C:/Development/DogMobileApp/app/src/main/res/layout/fragment_notification.xml;C:/Development/DogMobileApp/app/src/main/res/layout/fragment_register.xml;C:/Development/DogMobileApp/app/src/main/res/layout/fragment_report.xml;C:/Development/DogMobileApp/app/src/main/res/layout/fragment_settings.xml;C:/Development/DogMobileApp/app/src/main/res/layout/item_dog.xml;C:/Development/DogMobileApp/app/src/main/res/layout/item_settings.xml;C:/Development/DogMobileApp/app/src/main/res/menu/menu_dashboard.xml;C:/Development/DogMobileApp/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml;C:/Development/DogMobileApp/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml;C:/Development/DogMobileApp/app/src/main/res/navigation/my_navigation.xml;C:/Development/DogMobileApp/app/src/main/res/values/colors.xml;C:/Development/DogMobileApp/app/src/main/res/values/strings.xml;C:/Development/DogMobileApp/app/src/main/res/values/themes.xml;C:/Development/DogMobileApp/app/src/main/res/values-night/themes.xml;C:/Development/DogMobileApp/app/src/main/res/xml/backup_rules.xml;C:/Development/DogMobileApp/app/src/main/res/xml/data_extraction_rules.xml;C:/Development/DogMobileApp/app/src/main/AndroidManifest.xml;C:/Development/DogMobileApp/app/src/test/java/com/lostpawsconnect/dogmobileapp/ExampleUnitTest.java;C:/Development/DogMobileApp/app/google-services.json" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Development/DogMobileApp&quot;:&quot;{\&quot;/app/src/main/java/com/lostpawsconnect/dogmobileapp/adapters/ReportAdapter.java\&quot;:\&quot;This file defines a RecyclerView adapter class called ReportAdapter for displaying a list of dog reports.\\n\\nKey functions:\\n\\n- onCreateViewHolder(): Inflates the item layout and returns a ViewHolder.\\n\\n- onBindViewHolder(): Binds data to views in the ViewHolder. Loads dog image using Picasso and sets click listener. \\n\\n- getItemCount(): Returns size of data list.\\n\\n- ViewHolder: Inner class that represents each item view. Holds references to item views.\\n\\nThe adapter takes in a context, list of dog objects (Dogs model class) and a ReportListener interface. It displays the dog name and image for each item. On click, it calls the listener interface.\\n\\nOverall, it handles displaying a list of dog reports from a data model in a RecyclerView using the adapter pattern. The listener allows responding to item clicks. Picasso loads images asynchronously to improve performance.\&quot;,\&quot;/app/src/main/java/com/lostpawsconnect/dogmobileapp/preference/UserPref.java\&quot;:\&quot;This UserPref class is used to store and retrieve user preference data in Android.\\n\\nKey functions:\\n\\n- getInstance(Context context) - Static method to get the singleton instance of the class, initializing it with the passed Context if needed.\\n\\n- getInstance() - Overloaded static method to get the instance without Context, for cases where Context is not available. \\n\\n- getUserID() - Method to retrieve the stored user ID string.\\n\\n- setUserID(String userID) - Method to store the passed user ID string. \\n\\nThis class implements the singleton pattern to ensure there is only ever one instance of it. It stores user preference data like the user ID in member variables. The get/set methods allow other classes to retrieve and update this stored data.\\n\\nSo in summary, it provides a centralized place to store and retrieve user preference data like the user ID in a singleton instance, for use across the Android app.\&quot;,\&quot;/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml\&quot;:\&quot;This XML file defines an adaptive icon for the launcher icon in Android apps.\\n\\nKey functions:\\n\\n- Defines an adaptive icon resource that can adapt to different screen densities and formats.\\n\\n- \\u003cbackground\\u003e element specifies the background drawable that will be used. This provides the main color/shape of the icon.\\n\\n- \\u003cforeground\\u003e element specifies the foreground drawable that will overlay the background. This usually contains the app icon image or logo. \\n\\n- \\u003cmonochrome\\u003e element specifies an optional monochrome version of the icon that can be displayed on devices that only support monochrome icons, like Android Auto.\\n\\n- Allows the launcher icon to adapt its shape and image resources based on device/OS requirements while maintaining a consistent visual identity for the app.\\n\\n- Located in the mipmap-anydpi-v26 folder which tells Android to generate icon densities for this icon across multiple screen densities and formats.\\n\\nSo in summary, it defines the layered drawables that compose the adaptive launcher icon for the app, enabling it to adapt to different icon formats and densities on modern Android devices.\&quot;,\&quot;/app/src/main/res/drawable/ic_logout.xml\&quot;:\&quot;This XML file defines a vector drawable resource for an icon to represent logout in an Android app.\\n\\nKey functions:\\n\\n- It defines a \\u003cvector\\u003e element which is the root container for the vector graphic.\\n\\n- The android:autoMirrored, android:height, android:viewportHeight, android:viewportWidth, android:width attributes define properties of the vector graphic like its dimensions. \\n\\n- The \\u003cpath\\u003e element defines the shape of the icon using the android:pathData attribute which contains path commands to draw the outline.\\n\\n- The android:fillColor attribute sets the interior color of the path shape.\\n\\n- When this vector drawable is referenced in the app, it will render a scalable logout icon that can be tinted or resized as needed while maintaining its visual quality.\\n\\nSo in summary, this file defines a scalable vector graphic icon for logout that can be reused throughout the Android app for a consistent visual representation.\&quot;,\&quot;/app/src/main/java/com/lostpawsconnect/dogmobileapp/services/VRequest.java\&quot;:\&quot;This VRequest.java file defines a class VRequest that is used to generate request bodies for making API calls to a backend server.\\n\\nKey things:\\n\\n- It extends LocalVolleyRequest which is likely a base class for making network requests using Volley library.\\n\\n- It defines some static constants for the IP/host, login path, register dog path and report dog path endpoints. \\n\\n- The constructor initializes the superclass.\\n\\n- generateBody() method creates a request body map for login request with username, password params. \\n\\n- generateDogGetRequest() creates a request body just with the URL for getting dog report.\\n\\n- There is a commented out generateDogRequestBody() method that would create a request body for registering a dog, passing the dog object details.\\n\\nMain functions:\\n\\n- generateBody() - To generate login request body\\n- generateDogGetRequest() - To generate get dog report request body  \\n- generateDogRequestBody() - To generate register dog request body (commented)\\n\\nSo in summary, it is a utility class to generate the request bodies needed to make API calls to the backend for different actions like login, register dog, get dog report etc. using the Volley library.\&quot;,\&quot;/app/src/main/AndroidManifest.xml\&quot;:\&quot;This AndroidManifest.xml file defines the core configuration and components of the Android application.\\n\\nKey functions:\\n\\n- Declares permissions needed by the app (internet, storage access)\\n\\n- Defines the application label, icon, theme etc. \\n\\n- Registers app activities - MainActivity is the launcher activity, others are internal screens\\n\\n- Specifies activity properties like exported status, parent activity, orientation etc. \\n\\n- Configures full backup and data extraction rules for the app\\n\\n- Tells the system app requirements like hardware acceleration, RTL support etc. \\n\\nIn summary, it provides essential metadata to the Android system about the app\\u0027s components, permissions, configurations and more. This allows the system to identify and launch the app correctly.\&quot;,\&quot;/app/src/androidTest/java/com/lostpawsconnect/dogmobileapp/ExampleInstrumentedTest.java\&quot;:\&quot;This file contains an instrumented test for the Android app.\\n\\nKey things it does:\\n\\n- It is annotated with @RunWith(AndroidJUnit4.class) to indicate it should run using the AndroidJUnit4 test runner.\\n\\n- It contains a single test method called useAppContext().\\n\\n- This test method gets the Context of the app under test using InstrumentationRegistry.getInstrumentation().getTargetContext(). \\n\\n- It asserts that the package name of the app context matches what is expected (\\\&quot;com.lostpawsconnect.dogmobileapp\\\&quot;).\\n\\n- This is an example/template instrumented test provided by Android to verify the app is set up correctly for testing. \\n\\n- The main purpose is to validate that the app\\u0027s manifest and gradle configuration are set up properly to run tests on an Android device or emulator.\\n\\n- It provides a simple smoke test that the app can be launched and tested on Android.\\n\\nSo in summary, its key functions are:\\n\\n1. Serve as an example/template for instrumented tests\\n2. Validate the app is set up correctly to run Android tests \\n3. Provide a simple smoke test for launching the app\&quot;,\&quot;/app/src/main/res/drawable/ic_launcher_foreground.xml\&quot;:\&quot;This file defines a vector drawable that is used as the launcher icon for the Android app.\\n\\nKey functions:\\n\\n- It defines a vector drawable using XML tags rather than raster graphics like PNG. This allows it to scale smoothly on different screen densities.\\n\\n- The \\u003cvector\\u003e tag defines the overall size and viewport of the icon at 108x108 dp. \\n\\n- The \\u003cpath\\u003e tags define the shapes that make up the icon. There are two paths here - one for the main circular shape and gradient, and one for the inner details.\\n\\n- Attributes like android:pathData, android:fillColor, android:strokeWidth etc define the visual properties of each path like its shape, colors, strokes etc. \\n\\n- Gradients, fills and strokes are used to style the paths and give it a polished, material design look.\\n\\n- Vector drawables allow easy modification of the icon by editing the XML rather than bitmap assets. They result in smaller file sizes and smooth scaling on any device screen.\\n\\n- This file defines the default launcher icon displayed on home screens and in app drawers.\\n\\nSo in summary, it defines the app\\u0027s launcher icon as a scalable vector drawable for different screen densities and resolutions.\&quot;,\&quot;/app/src/main/res/layout/fragment_home.xml\&quot;:\&quot;This XML layout file defines the user interface for the home fragment in an Android app.\\n\\nKey functions:\\n\\n- CoordinatorLayout as the root layout to allow for coordinating animations and interactions between views. \\n\\n- RelativeLayout to position child views relative to each other or the parent layout.\\n\\n- ImageView to display the app logo at the top center. \\n\\n- TextView below the logo to show the app name.\\n\\n- RecyclerView to display a list of items that can be scrolled. Positioned at the bottom.\\n\\n- ImageButton to the right of the logo for a search button. \\n\\n- It defines the layout, sizes, positions and IDs of the key UI elements like logo, title, list and search button. \\n\\n- Allows populating the RecyclerView with data and handling clicks on the search button.\\n\\n- Provides the basic structure and organization of elements for the home screen fragment.\\n\\nSo in summary, it defines the visual structure and components of the home fragment user interface for the LostPawsConnect Android app.\&quot;,\&quot;/app/src/main/java/com/lostpawsconnect/dogmobileapp/interfaces/SettingsListener.java\&quot;:\&quot;This file defines an interface called SettingsListener for handling events in the settings screen of the Lost Paws Connect dog mobile app.\\n\\nKey functions:\\n\\n- Extends DefaultEventListener interface - Provides default event handling methods\\n\\n- onLogoutClickListener() - Default method to handle when the logout button is clicked in the settings screen. Classes that implement this interface can override this method to define custom logout click handling logic. \\n\\nThe purpose of this interface is to:\\n\\n1. Define common callback methods for handling events in the settings screen\\n\\n2. Allow classes to implement this interface and define custom logic for handling specific events like logout button click\\n\\n3. Provide a standard way for the settings screen to communicate events/actions to other classes via the interface methods.\\n\\nSo in summary, it defines a listener interface for handling settings screen events in a standardized way throughout the app. Implementing classes can then define custom logic for specific events like logout.\&quot;,\&quot;/app/src/main/res/layout/activity_dashboard.xml\&quot;:\&quot;This XML file defines the layout for the DashboardActivity screen in the app.\\n\\nKey functions:\\n\\n- It uses a CoordinatorLayout as the root layout to allow for coordinating the behavior of its children.\\n\\n- It contains a RelativeLayout to position child views. \\n\\n- It includes a NavHostFragment which will host the different navigation destinations. This allows navigating between fragments.\\n\\n- It sets the NavHostFragment to take up the full screen except for the bottom 80dp where the bottom nav will go.\\n\\n- It includes a BottomNavigationView at the bottom to allow navigation between top-level destinations via the bottom nav bar. \\n\\n- The BottomNavigationView\\u0027s menu is defined in the menu_dashboard resource file. \\n\\n- This layout coordinates the NavHostFragment with the BottomNavigationView so that navigation is driven by both the fragment container and bottom nav bar.\\n\\nSo in summary, it sets up the basic screen layout with a fragment container and bottom nav bar to enable navigation between fragments using the Navigation Component architecture.\&quot;,\&quot;/app/src/main/res/layout/activity_report_dog_details.xml\&quot;:\&quot;This XML layout file defines the user interface for an activity that displays details about a dog.\\n\\nKey functions:\\n\\n- Uses a CoordinatorLayout as the root layout to allow for scrolling and coordinating the behavior of child views. \\n\\n- Contains a ScrollView to make the content scrollable since there is more data than fits on the screen.\\n\\n- Uses a RelativeLayout inside the ScrollView to position views relative to each other.\\n\\n- Displays text labels and fields to show the dog\\u0027s name, breed, color, gender etc. The fields are set to not be editable.\\n\\n- Includes an ImageView to display a photo of the dog. \\n\\n- Has a Button labeled \\\&quot;Report Missing\\\&quot; at the bottom to allow reporting the dog missing from this details screen.\\n\\n- Applies styles, colors and other attributes to text, images and buttons to control their appearance.\\n\\n- Defines an interactive UI for viewing dog details with scrolling, labels, fields and a call-to-action button using Android layout components and attributes.\&quot;,\&quot;/app/src/main/res/xml/backup_rules.xml\&quot;:\&quot;This backup_rules.xml file controls what data from the app is included or excluded from automatic device backups.\\n\\nThe key functions of this file are:\\n\\n- It defines rules for which of the app\\u0027s data should be backed up or excluded from backups.\\n\\n- The \\u003cfull-backup-content\\u003e element is the root element that contains include and exclude rules.\\n\\n- \\u003cinclude\\u003e rules specify data that should be included in backups, like shared preferences files. The \\\&quot;domain\\\&quot; attribute specifies the type of data (sharedpref here) and the \\\&quot;path\\\&quot; attribute specifies the file/folder path to include.\\n\\n- \\u003cexclude\\u003e rules specify data that should be excluded from backups, again using domain and path attributes. \\n\\n- This allows the app developer to selectively choose what user/app data is important to backup and restore vs data that doesn\\u0027t need to be backed up, to control the backup size.\\n\\n- By default, all app data is backed up. This file allows customizing the default behavior by adding include and exclude rules.\\n\\nSo in summary, it controls the automatic device backups for the app by defining which specific app data should be backed up and which should be excluded.\&quot;,\&quot;/app/src/main/res/layout/item_settings.xml\&quot;:\&quot;This XML layout file defines the UI for an individual item/row in a settings screen.\\n\\nKey functions:\\n\\n- Defines a CoordinatorLayout as the root layout. This allows for coordinating the interaction between child views.\\n\\n- Contains a RelativeLayout as the direct child to hold the item views. \\n\\n- Defines an ImageView to display an icon/logo for the setting item. \\n\\n- Defines a TextView to display the name/label for the setting item. It is positioned to the right of the ImageView.\\n\\n- Sets layout parameters like width, height, margins etc. to control the positioning and sizing of the views. \\n\\n- Allows dynamically setting the image, text and other properties from Java code for each item instance.\\n\\n- Provides a reusable template for displaying individual items in a settings/options list consistently across the app. The views and properties can be populated from a data model.\\n\\nSo in summary, it defines the UI structure and layout for a single customizable item/row in a settings screen.\&quot;,\&quot;/app/src/main/res/values/themes.xml\&quot;:\&quot;This themes.xml file defines the themes used in the Android app.\\n\\nKey functions:\\n\\n- Defines the base theme \\\&quot;Base.Theme.DogMobileApp\\\&quot; which inherits from the Material3 DayNight theme with no action bar. This will be the parent theme for other themes.\\n\\n- Allows customizing the base theme by overriding attributes like colorPrimary.\\n\\n- Defines the main app theme \\\&quot;Theme.DogMobileApp\\\&quot; which inherits from the base theme. This will be the default theme used across the app.\\n\\n- Located in res/values/themes.xml so it can be overridden in other language/configuration specific values folders.\\n\\n- Uses the Material3 theme components which provide built-in light/dark theme support and Material Design styling out of the box. \\n\\n- Allows defining a consistent visual style across the app by setting the theme in one place and inheriting from it.\\n\\n- Future themes can be defined that inherit from the base theme to create alternate visual styles if needed.\\n\\nSo in summary, it centrally defines the default light/dark themes used in the app based on Material Design guidelines.\&quot;,\&quot;/app/src/test/java/com/lostpawsconnect/dogmobileapp/ExampleUnitTest.java\&quot;:\&quot;This file contains a unit test for the com.lostpawsconnect.dogmobileapp package.\\n\\nKey things:\\n\\n- It is located in src/test/java, which indicates it contains test code rather than production code.\\n\\n- The package matches the package being tested (com.lostpawsconnect.dogmobileapp)\\n\\n- It imports the JUnit testing framework (org.junit.Test) and JUnit assertions (static org.junit.Assert methods)\\n\\n- There is a single test method marked with @Test annotation - this identifies it as a test to be run.\\n\\n- The test method name (addition_isCorrect) describes what it is testing \\n\\n- It contains a simple assertion (assertEquals) to verify 2 + 2 equals 4\\n\\n- The test will run on the development machine and is not intended for production\\n\\nSo in summary, this file:\\n\\n- Contains a unit test \\n- For the com.lostpawsconnect.dogmobileapp package\\n- Uses JUnit and assertions to test a simple math operation\\n- Identifies it is for local development/testing purposes\&quot;,\&quot;/app/src/main/res/drawable/ic_launcher_background.xml\&quot;:\&quot;This file defines the background image for the Android app launcher icon. It is a vector drawable file that uses paths to draw the icon image.\\n\\nKey functions:\\n\\n- It defines the size of the icon image as 108x108 dp.\\n\\n- The main background path fills the entire viewport with a green color. \\n\\n- Multiple path elements are used to draw thin white lines vertically, horizontally and diagonally, creating a grid pattern.\\n\\n- All path elements except the background one have transparent fill colors and white strokes to create the line patterns. \\n\\n- By combining all these path elements, it generates a grid icon background design that can scale to different sizes smoothly.\\n\\n- Being a vector drawable, it allows the icon image to be resolution independent and scale nicely on different screen densities.\\n\\nSo in summary, it defines the launcher icon background design as a scalable vector graphic using multiple path elements to draw the grid pattern. This ensures high quality icon image across different devices.\&quot;,\&quot;/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml\&quot;:\&quot;This XML file defines an adaptive icon for the app launcher icon.\\n\\nKey functions:\\n\\n- It is located in the mipmap-anydpi-v26 folder, which indicates it is for providing an adaptive icon on Android 8.0 (API level 26) and higher.\\n\\n- \\u003cadaptive-icon\\u003e is the root element for defining an adaptive icon. \\n\\n- \\u003cbackground\\u003e specifies the background drawable for the icon, which will be shown on the launcher.\\n\\n- \\u003cforeground\\u003e specifies the foreground drawable that will be composited over the background. This provides the main icon image.\\n\\n- \\u003cmonochrome\\u003e specifies an optional monochrome version of the foreground that can be shown on devices that only support monochrome adaptive icons.\\n\\n- Together these elements define a scalable, adaptive icon that can be displayed properly on different device screens, densities, and in monochrome/color modes on newer Android versions. This replaces the need for separate launcher icons across density buckets.\\n\\nSo in summary, it defines a scalable, adaptive launcher icon for the app that works on modern Android versions.\&quot;,\&quot;/app/src/main/res/layout/fragment_settings.xml\&quot;:\&quot;This XML layout file defines the user interface for a Settings fragment in an Android app.\\n\\nKey functions:\\n\\n- CoordinatorLayout is the root layout and allows for coordinating the interaction between child views. \\n\\n- RelativeLayout is used to hold the ListView and add padding.\\n\\n- ListView with id lv takes up the full width and height of the parent RelativeLayout. This will display a vertically scrolling list of settings options. \\n\\n- android:scrollbars\\u003d\\\&quot;vertical\\\&quot; specifies that vertical scroll bars should be shown as the list extends beyond the screen height.\\n\\n- Layout widths and heights are set to match_parent to fill the available space.\\n\\n- Padding is added to the RelativeLayout to add spacing around the list.\\n\\nSo in summary, this fragment layout defines a vertically scrolling ListView to display settings options to the user, using a CoordinatorLayout as the root view and a RelativeLayout to hold the ListView with padding.\&quot;,\&quot;/app/src/main/res/layout/fragment_notification.xml\&quot;:\&quot;This XML layout file defines the user interface for a fragment called fragment_notification.xml.\\n\\nKey things it does:\\n\\n- Defines a CoordinatorLayout as the root layout. This is used for coordinating the interaction between views.\\n\\n- Inside the CoordinatorLayout is a RelativeLayout that takes up the full width and height. This will be the main container for the fragment contents. \\n\\n- It includes a TextView centered horizontally with some top margin. This will display static text \\\&quot;Notification Fragment\\\&quot;.\\n\\n- Sets properties like text color, size, style for the TextView.\\n\\n- Lays out the single TextView element at the center of the parent RelativeLayout.\\n\\nSo in summary, this fragment layout:\\n\\n1. Defines a coordinator root layout \\n2. Contains a RelativeLayout as the main container\\n3. Includes a centered TextView \\n4. Configures the TextView properties\\n5. Lays out the single TextView element\\n\\nThis provides a basic UI structure and labeled text for the notification fragment. Other elements can be added as needed.\&quot;,\&quot;/app/src/main/res/values/colors.xml\&quot;:\&quot;This colors.xml file is used to define color resources in Android.\\n\\nSome key points about it:\\n\\n- It is located in the res/values folder, which is where XML resource files that don\\u0027t vary by configuration go.\\n\\n- The \\u003cresources\\u003e element acts as a container for all the color resources.\\n\\n- Each \\u003ccolor\\u003e element defines a color resource, identified by its name attribute. \\n\\n- The text content of each \\u003ccolor\\u003e element specifies the color value in hexadecimal format.\\n\\n- This allows colors to be defined once and reused throughout the app by referencing @color/name.\\n\\n- It centralizes color definitions so they can be easily changed in one place if needed.\\n\\n- The defined colors can then be used in XML layouts, drawables, code etc by referencing the color resource name.\\n\\n- It provides a cleaner alternative to hardcoding color values directly in code or XML.\\n\\n- Additional colors can be added easily without modifying existing code that uses the colors.\\n\\nSo in summary, it defines reusable color resources that can be accessed throughout the app for a consistent color scheme.\&quot;,\&quot;/app/src/main/res/layout/fragment_report.xml\&quot;:\&quot;This XML layout file defines the user interface for a fragment that displays a report.\\n\\nKey functions:\\n\\n- CoordinatorLayout - The outermost layout that coordinates the positioning of child views. This allows for scrolling and other behaviors. \\n\\n- RelativeLayout - A container for the RecyclerView, adding padding around it.\\n\\n- RecyclerView - Displays a list of items by recycling views. This will display the report data in a scrollable list.\\n\\n- recycler - ID for the RecyclerView to reference it in code. \\n\\n- match_parent - Both the CoordinatorLayout and RecyclerView fill the entire fragment space.\\n\\nThis layout sets up a simple scrolling list using a RecyclerView to display report data inside a fragment. The CoordinatorLayout allows for scrolling coordination and other behaviors.\&quot;,\&quot;/app/src/main/res/values/strings.xml\&quot;:\&quot;This file is called strings.xml and it is located in the res/values folder of an Android app project.\\n\\nThe strings.xml file serves the following key functions:\\n\\n- It defines all the text used by the app that can be localized, such as labels, messages, etc. This allows the text to be translated to different languages.\\n\\n- The \\u003cstring\\u003e elements define individual text strings that can be referenced elsewhere in the code using @string/string_name. This avoids hardcoding strings.\\n\\n- It provides a single location to define and maintain all text used in the app. If a string needs to be changed, it only needs to be updated in this file. \\n\\n- It allows strings to be localized by providing alternative strings.xml files in subdirectories like res/values-es/strings.xml for Spanish translations.\\n\\n- The app_name string defines the label that is displayed for the app in the device\\u0027s application menu.\\n\\nSo in summary, strings.xml is a central resource file for managing all textual UI content in an Android app in a localizable way. It improves maintainability and supports internationalization of the app\\u0027s text.\&quot;,\&quot;/app/src/main/res/layout/activity_missing_dog_details.xml\&quot;:\&quot;This XML layout file defines the user interface for an activity that displays details about a missing dog.\\n\\nKey functions:\\n\\n- Uses a CoordinatorLayout as the root layout to allow for scrolling and coordinating the behavior of child views. \\n\\n- Contains a ScrollView to make the content scrollable since there is more data than can fit on the screen.\\n\\n- Uses a RelativeLayout inside the ScrollView to position views relative to each other.\\n\\n- Displays text labels and editable text fields to show the dog\\u0027s name, breed, color, etc. These are populated from data.\\n\\n- Shows the dog\\u0027s photo using an ImageView. \\n\\n- Displays the dog\\u0027s gender as text.\\n\\n- Includes a button labeled \\\&quot;Report Found\\\&quot; to allow the user to report finding the dog.\\n\\n- Applies styles, colors and other attributes to control the visual presentation of the various views like labels, text fields and button.\\n\\nSo in summary, it defines the UI to display details about a missing dog and includes an option for the user to report finding the dog.\&quot;,\&quot;/app/src/main/res/layout/item_dog.xml\&quot;:\&quot;This XML layout file defines the UI for a single item in a list of dogs.\\n\\nKey functions:\\n\\n- CoordinatorLayout as the root layout to allow for coordinating behaviors between child views. \\n\\n- RelativeLayout to position views relative to each other.\\n\\n- CardView to display content with an elevation and rounded corners for visual separation.\\n\\n- ImageView to display a dog image. \\n\\n- Two TextViews - one for the label \\\&quot;Pet Name\\\&quot; and one to display the actual pet name text. \\n\\n- Positioning of views using layout_toRightOf, layout_alignTop/Bottom etc to place the text views next to the image.\\n\\n- Padding and margins to add spacing between elements. \\n\\n- Attributes like android:src, android:text etc to populate the views with data like image, text etc.\\n\\nSo in summary, this layout defines the UI for a single item in a list, likely to be inflated and populated with data for each dog object to display their details in a consistent card-like format.\&quot;,\&quot;/app/src/main/java/com/lostpawsconnect/dogmobileapp/DashboardActivity.java\&quot;:\&quot;This DashboardActivity.java file is the main activity for the app\\u0027s dashboard/home screen.\\n\\nKey functions:\\n\\n- Sets up the navigation component with a bottom navigation bar to navigate between fragments\\n- Initializes Firebase authentication to get the current user\\n- Checks if a user is signed in, and finishes the activity if no user is authenticated \\n- Implements the SettingsListener interface to handle logout button clicks, which signs the user out and returns to the login screen\\n- Binds the activity layout to display the bottom navigation bar\\n- Finds the NavController to control navigation between fragments\\n\\nIn summary, it:\\n\\n- Sets up the navigation architecture \\n- Authenticates the user with Firebase\\n- Provides a logout handler\\n- Displays the bottom nav bar\\n- Allows navigation between fragments\\n\\nSo the main responsibilities are authentication, navigation setup, and handling logout from the settings screen.\&quot;,\&quot;/app/src/main/java/com/lostpawsconnect/dogmobileapp/fragments/HomeFragment.java\&quot;:\&quot;This HomeFragment class:\\n\\n- Displays a list of missing dogs fetched from Firebase Firestore.\\n\\nKey functions:\\n\\n- loadDataFirestore() - Fetches missing dog data from Firebase Firestore and loads it into the dogsList.\\n\\n- bindDataToView() - Binds the dogsList to a RecyclerView adapter to display the list. \\n\\n- setListeners() - Sets a click listener on the search image button.\\n\\n- browseImage() - Launches an intent to pick an image from the device gallery.\\n\\n- getPath() - Gets the real path of the selected image from its URI. \\n\\n- tempToFirebaseStorage() - Uploads the selected image to Firebase Storage.\\n\\n- imageSimilarityPy() - Calls a Python script to run image similarity analysis on the uploaded image.\\n\\nSo in summary, it displays a list of missing dogs, allows the user to select an image from their device, uploads it to Firebase Storage and runs image similarity analysis using a Python script to potentially identify the dog in the image.\&quot;,\&quot;/app/src/main/res/layout/fragment_register.xml\&quot;:\&quot;This XML layout file defines the user interface for a fragment used for dog registration.\\n\\nKey functions:\\n\\n- Defines a CoordinatorLayout as the root layout to allow for scrolling behavior\\n- Contains a ScrollView to enable vertical scrolling of content \\n- Uses a RelativeLayout inside the ScrollView to position views relative to each other\\n- Defines text fields (TextInputLayout) for entering the dog\\u0027s name, breed, color\\n- Includes a TextView and RadioGroup for selecting the dog\\u0027s gender\\n- Displays an ImageView to preview the selected dog photo  \\n- Includes buttons to browse for an image and save the registration details\\n- Positions all views in a vertical hierarchy using layout_below attributes\\n- Applies styling like colors, sizes, margins to make the UI polished\\n\\nSo in summary, this layout defines all the necessary UI elements for a dog registration form, allowing the user to enter details and select a photo for their dog. The scrolling and relative positioning enables an organized, user-friendly registration experience.\&quot;,\&quot;/app/google-services.json\&quot;:\&quot;This file (google-services.json) configures an Android app to use Google services like Firebase.\\n\\nKey functions:\\n\\n- Identifies the Firebase project details like project number, ID and storage bucket. This links the app to the specific Firebase project.\\n\\n- Specifies the app package name (com.lostpawsconnect.dogmobileapp) so Firebase knows which app to configure. \\n\\n- Contains the API key for the app to authenticate with Google APIs. \\n\\n- Configures services like Firebase Invites/App Invites to enable social/sharing features in the app.\\n\\n- Sets the client ID for the mobile SDK so Firebase can identify the app. \\n\\n- Specifies the configuration version so Firebase knows which configuration schema to follow.\\n\\nIn summary, this file provides the necessary configuration for the Android app to connect to and use the features of the associated Firebase project like databases, authentication, remote config etc. It glues the app to its backend services.\&quot;,\&quot;/app/src/main/res/drawable/ic_home.xml\&quot;:\&quot;This XML file defines a vector drawable icon for home.\\n\\nSome key things it does:\\n\\n- Defines the icon as a vector drawable, allowing it to scale smoothly on different screen densities.\\n\\n- Sets the viewport size to match the desired icon size of 24dp x 24dp. \\n\\n- Sets the width, height and tint color of the icon.\\n\\n- Defines the path data for the home icon shape using pathData. This draws a house-like shape.\\n\\n- Sets the path fill color to white. \\n\\n- Allows this icon to be referenced and used as a drawable resource in Android layouts and code.\\n\\nSo in summary, it:\\n\\n1. Defines a scalable vector icon \\n2. Sets the viewport and size\\n3. Draws the icon shape path\\n4. Sets the path color\\n5. Makes the icon available as a drawable resource\\n\\nThis allows this home icon to be reused throughout the app at different sizes while maintaining quality.\&quot;,\&quot;/app/src/main/res/navigation/my_navigation.xml\&quot;:\&quot;This file defines the navigation graph for the app. Some key things:\\n\\n- It is located at res/navigation/my_navigation.xml\\n- It defines a navigation graph with id @+id/my_navigation\\n- It specifies the start destination as the homeFragment fragment\\n- It defines 5 fragment destinations - homeFragment, notifFragment, reportFragment, registerFragment, settingsFragment\\n- Each fragment defines the Android class name, label and layout \\n\\nThe main functions of this navigation graph are:\\n\\n- Define the overall navigation structure of the app as a graph of fragments\\n- Specify the start destination when the graph is inflated\\n- Allow programmatically navigating between fragments defined in the graph\\n- Handle back stack and navigation transitions between fragments\\n\\nSo in summary, this navigation graph file defines the core navigation flow and fragment destinations for the app that can then be used for navigation and transition handling between fragments.\&quot;,\&quot;/app/src/main/res/drawable/ic_register.xml\&quot;:\&quot;This XML file defines a vector drawable resource that can be used as an icon in an Android app.\\n\\nKey functions:\\n\\n- It defines a vector graphic using \\u003cpath\\u003e elements to draw shapes. In this case it draws 3 circles and 3 rectangles to create an icon that looks like a registration/sign up form.\\n\\n- The android:tint attribute sets the default color for the icon when used.\\n\\n- Attributes like android:height, android:width set the size of the icon. \\n\\n- Storing it as a vector drawable allows it to be scaled smoothly to different sizes without losing quality.\\n\\n- It can be referenced and used as an icon in the Android app, for example as a button icon or menu item icon. \\n\\n- The autoMirrored attribute makes it compatible with both left-to-right and right-to-left layouts.\\n\\nSo in summary, this XML defines a scalable registration icon graphic that can be reused throughout the Android app as a vector drawable resource.\&quot;,\&quot;/app/src/main/res/xml/data_extraction_rules.xml\&quot;:\&quot;This XML file defines data extraction rules for Android backup and restore.\\n\\nThe key functions of this file include:\\n\\n- Controlling what data is backed up to the cloud via \\u003ccloud-backup\\u003e tags\\n\\n- Using \\u003cinclude\\u003e tags to specify which files/data should be backed up\\n\\n- Using \\u003cexclude\\u003e tags to specify which files/data should NOT be backed up \\n\\n- Separate sections can be defined for cloud backup vs device transfers\\n\\n- For cloud backup, this file determines what user data is included when a user backs up their device to their Google account via the Backup feature.\\n\\n- It allows the app developer to selectively choose which app data/files should be included or excluded from backups.\\n\\n- This helps control the size of backups and ensure only necessary data is transferred and stored in the cloud.\\n\\nSo in summary, this XML file defines the rules for what app data gets backed up or restored when users perform backups and restores of their device data via Android\\u0027s backup system. It gives developers control over what is included in backups.\&quot;,\&quot;/app/src/main/java/com/lostpawsconnect/dogmobileapp/python/image_similarity.py\&quot;:\&quot;This Python file contains functions for comparing the similarity between two images using a deep learning model.\\n\\nThe key functions are:\\n\\n- image_to_vector(): Takes an image as input and converts it to a vector representation by passing it through a pre-trained VGG16 convolutional neural network model. This extracts deep learning features from the image.\\n\\n- compare_similarity(): Takes URLs for two images as input, loads the images, converts them to vectors using image_to_vector(), and calculates the cosine similarity between the vectors as a measure of how similar the images are. Cosine similarity ranges from 0 to 1, with 1 being identical images. \\n\\n- load_image_from_url(): Loads an image from a URL by making an HTTP request and returning a PIL Image object.\\n\\nSo in summary, it provides functionality to:\\n\\n1. Extract deep learning features from images using a pre-trained CNN model\\n2. Compare two images by calculating the cosine similarity of their feature vectors \\n3. Load images from URLs\\n\\nThis allows quantitatively comparing the similarity between two images programmatically using deep learning techniques.\&quot;,\&quot;/app/src/main/java/com/lostpawsconnect/dogmobileapp/MainActivity.java\&quot;:\&quot;This MainActivity.java file is the entry point for the app\\u0027s login flow.\\n\\nKey functions:\\n\\n- onCreate(): Sets up the activity layout binding, initializes Firebase authentication, and checks if a user is already logged in to redirect to the dashboard.\\n\\n- setListeners(): Sets an onClick listener for the login button to handle login attempts. \\n\\n- loginButtonClick(): Gets the username and password from the edit texts, shows a loading toast, and calls FirebaseAuth.signInWithEmailAndPassword() to authenticate the user. \\n\\n- signInWithEmailAndPassword(): Handles the authentication callback. If successful, gets the FirebaseUser and saves the user ID to shared preferences before redirecting to the dashboard. If failed, shows an error toast.\\n\\n- Initializes FirebaseApp and FirebaseAuth instances to handle authentication.\\n\\n- Checks FirebaseAuth.getCurrentUser() on launch to see if a user is already logged in for automatic redirection.\\n\\nSo in summary, it sets up the login UI, initializes Firebase auth, handles login button clicks by authenticating with Firebase, and redirects to the dashboard on success.\&quot;,\&quot;/app/src/main/res/drawable/paw_prints.xml\&quot;:\&quot;This file defines a vector drawable resource for paw prints.\\n\\nKey functions:\\n\\n- It is a \\u003cvector\\u003e drawable which allows scaling of the image without loss of quality.\\n\\n- Each \\u003cpath\\u003e element defines a vector path for one paw print shape using pathData attributes. \\n\\n- The pathData attributes define the vector path using relative coordinate commands. \\n\\n- fillColor attributes set the color of each path to a blue shade.\\n\\n- The viewport and size attributes allow the vector to be scaled within a defined bounding box while maintaining its aspect ratio.\\n\\n- Together the multiple path elements define the full set of overlapping paw print shapes to create the paw prints image/icon. \\n\\n- This vector drawable can then be referenced and scaled as needed in XML layouts or drawn programmatically on Android.\\n\\nSo in summary, it defines a scalable paw prints icon using multiple vector paths composed into a single drawable resource that can be reused throughout the app.\&quot;,\&quot;/app/src/main/java/com/lostpawsconnect/dogmobileapp/fragments/SettingsFragment.java\&quot;:\&quot;This SettingsFragment file defines a fragment that displays a settings screen in the app.\\n\\nKey functions:\\n\\n- onCreateView(): Inflates the fragment_settings layout and returns the view.\\n\\n- onAttach(): Gets a reference to the parent activity by implementing the SettingsListener interface. This is used to call logout callbacks.\\n\\n- setList(): Populates the list with a \\\&quot;Logout\\\&quot; option and sets up the list adapter and click listener. \\n\\n- Click listener: Handles clicks on list items. For \\\&quot;Logout\\\&quot; it shows a confirmation dialog. \\n\\n- Confirmation dialog: Shows a Yes/No dialog to confirm logout. Calls the onLogoutClickListener() method from the parent activity interface on confirmation.\\n\\n- SettingsListener interface: Defines the onLogoutClickListener() callback that is called when logout is confirmed. This allows the parent activity to handle the actual logout process.\\n\\nSo in summary, it displays a settings screen with a logout option. It handles logout confirmation and notifies the parent activity to actually perform the logout via the interface callback.\&quot;,\&quot;/app/src/main/java/com/lostpawsconnect/dogmobileapp/model/Users.java\&quot;:\&quot;This Users.java file defines a model class to represent a user in the Lost Paws Connect dog mobile app.\\n\\nKey things:\\n\\n- It is a POJO (Plain Old Java Object) class used to encapsulate user data\\n- It uses Lombok annotations like @Data and @NoArgsConstructor for convenience \\n- @Data generates getter/setter methods and toString()\\n- @NoArgsConstructor generates a no-arg constructor\\n- It defines properties to store user data like ID, username, password, name, user type\\n- Properties are private to encapsulate the data\\n- Getters allow accessing the property values \\n- Setters allow updating the property values\\n\\nIn summary, this class:\\n\\n1. Defines a data model for a user \\n2. Encapsulates user attributes like ID, name, credentials\\n3. Allows easily accessing/updating user properties via getters/setters\\n4. Can be used to represent user objects in the application\\n5. Provides a standardized way to work with user data\\n\\nSo in essence, it defines the structure and functions needed to represent a user entity in the application.\&quot;,\&quot;/app/src/main/java/com/lostpawsconnect/dogmobileapp/fragments/RegisterFragment.java\&quot;:\&quot;This Java file contains a RegisterFragment class that handles the dog registration functionality in the app.\\n\\nKey functions:\\n\\n- onCreateView(): Initializes the Fragment binding and ProgressDialogs. Sets up click listeners.\\n\\n- setListeners(): Sets click listeners for the save button, gender radio buttons and browse button.\\n\\n- uploadImageToFirebaseStorage(): Uploads the selected image bitmap to Firebase Storage, gets the download URL and saves it to the Dogs object. \\n\\n- saveDogToFirestore(): Saves the Dogs object to the Firestore \\\&quot;dogs_registered\\\&quot; collection.\\n\\n- clearFields(): Clears all fields after successful registration.\\n\\n- browseImage(): Launches intent to select image from gallery using a ActivityResultLauncher.\\n\\n- getPath(): Gets the real path from the image URI selected from gallery. \\n\\n- askPermission(): Checks and requests storage permissions if not granted already.\\n\\nThe key functions work together to:\\n\\n1. Select an image from gallery\\n2. Upload it to Firebase Storage \\n3. Save dog details like name, breed etc to a Dogs object\\n4. Save the Dogs object to Firestore for registration\\n5. Clear fields on success\\n\\nSo in summary, it handles the entire dog registration flow including image upload and data storage.\&quot;,\&quot;/app/src/main/java/com/lostpawsconnect/dogmobileapp/model/Dogs.java\&quot;:\&quot;This Dogs.java file defines a model class to represent a dog entity in the application.\\n\\nKey functions:\\n\\n- It defines fields to store attributes of a dog like id, name, breed, color, gender, image url etc. \\n\\n- It uses Lombok annotations like @Data and @NoArgsConstructor to generate getter/setter methods and a no-args constructor.\\n\\n- It has different constructors to initialize the object from different parameters.\\n\\n- Getter methods to retrieve attribute values.\\n\\n- Setter methods to update attribute values like remarks, status.\\n\\n- toMap() method to convert the dog object to a Map for storing in Firestore database. \\n\\n- fromMap() static method to convert a Map retrieved from Firestore back to a Dogs object.\\n\\n- It is used to represent a dog entity and map it to and from the Firestore database for CRUD operations on dog data in the app. The model class encapsulates the dog attributes and provides methods to work with the object and database.\\n\\nSo in summary, it defines a model class to represent a dog entity with attributes and methods to map it to the Firestore database.\&quot;,\&quot;/app/src/main/res/layout/activity_main.xml\&quot;:\&quot;This XML file defines the layout for the MainActivity in an Android app.\\n\\nKey functions:\\n\\n- Defines a CoordinatorLayout as the root layout container\\n- Contains a RelativeLayout that positions all the UI elements \\n- Includes an ImageView logo at the top center\\n- Two TextInputLayouts for username and password input fields\\n- Username and password TextInputEditTexts inside the TextInputLayouts\\n- Password field has password toggle enabled\\n- A Button below the password field for login action\\n- Uses layout_below and layout_marginTop to position elements vertically  \\n- Sets widths, heights, hints, text sizes etc for all elements\\n- Defines the overall structure and layout of the login screen\\n\\nSo in summary, this layout file defines the user interface for the login screen, positioning the logo, input fields and button in a vertical stack using a RelativeLayout inside a CoordinatorLayout container.\&quot;,\&quot;/app/src/main/java/com/lostpawsconnect/dogmobileapp/ReportDogDetailsActivity.java\&quot;:\&quot;This Java file defines the ReportDogDetailsActivity class in the com.lostpawsconnect.dogmobileapp package.\\n\\nIt is an activity that allows a user to report a dog as missing. Key functions include:\\n\\n- onCreate(): Sets up the activity layout and UI bindings. Gets dog data passed via intent.\\n\\n- setListeners(): Sets a click listener on the \\\&quot;Report Missing\\\&quot; button. \\n\\n- showConfirmationDialog(): Displays an alert dialog to confirm reporting the dog as missing. Gets user input for remarks. \\n\\n- reportMissing(): Updates the dog document in Firestore to set its status to \\\&quot;missing\\\&quot; with the provided remarks. \\n\\n- getData(): Parses the dog object passed via intent and populates the UI fields. Loads the dog image using Picasso.\\n\\nSo in summary, this activity allows viewing dog details passed to it, displays a confirmation dialog before reporting the dog as missing, and updates the dog document in the backend database (Firestore) upon confirmation. It handles loading and displaying the dog data as well as the reporting workflow.\&quot;,\&quot;/app/src/main/java/com/lostpawsconnect/dogmobileapp/adapters/SettingsAdapter.java\&quot;:\&quot;This SettingsAdapter class is used to display a list of settings options in a recycler view or list view.\\n\\nKey functions:\\n\\n- getCount() - Returns the number of items in the settings list\\n- getItem() - Gets the item at the given position from the settings list \\n- getItemId() - Returns a unique id for the item at the given position\\n- getView() - Inflates the item layout and binds the data to views like ImageView and TextView to display each item\\n\\nIt takes in the Context and a List of setting names. It uses a BaseAdapter to map the data to views. \\n\\nThe getView() method inflates the item layout, gets the ImageView and TextView, sets the image based on the setting name using a switch case, and sets the text to the setting name.\\n\\nThis allows displaying a customizable list of settings options by just passing in the setting names. The adapter handles mapping the data to views to display it in the list.\&quot;,\&quot;/app/src/main/res/drawable/ic_settings.xml\&quot;:\&quot;This file defines an SVG vector drawable resource that can be used as an icon in an Android app.\\n\\nKey functions:\\n\\n- It defines a \\u003cvector\\u003e element which is the root node for an SVG drawing.\\n\\n- The vector element specifies attributes like height, width, viewport size to define the size and scaling of the icon. \\n\\n- It contains a \\u003cpath\\u003e element which defines the shape of the icon using path data coordinates. \\n\\n- The path has a fillColor attribute to set the color of the shape, in this case white.\\n\\n- The vector element has an android:tint attribute which allows dynamically tinting the icon at runtime.\\n\\n- The path data defines a complex shape to render the specific icon (looks like a settings gear icon).\\n\\nSo in summary, this XML drawable resource defines an SVG vector icon using a path element, which can then be loaded and displayed as an icon in the Android app, with support for dynamic tinting of the color.\&quot;,\&quot;/app/src/main/java/com/lostpawsconnect/dogmobileapp/interfaces/ReportListener.java\&quot;:\&quot;This file defines an interface called ReportListener in the com.lostpawsconnect.dogmobileapp.interfaces package.\\n\\nIt is used to define a listener for report related events in the Lost Paws Connect dog mobile app.\\n\\nKey things:\\n\\n- It extends the DefaultEventListener interface, which likely defines common listener methods like onSuccess, onFailure etc. \\n\\n- It does not define any additional methods, but includes a default empty callFinish() method.\\n\\n- Classes that implement this interface can then be registered as listeners to receive callbacks for report related events in the app. \\n\\n- The app code would call the listener methods like callFinish() to notify about completion of report related tasks.\\n\\nSo in summary:\\n\\n- Defines a report listener interface \\n- Extends a base event listener interface\\n- Can be implemented by classes to receive report related callback notifications\\n- Includes a default empty callback method for report completion\\n\\nIt allows classes to listen for and react to report related events happening in the Lost Paws Connect dog mobile app.\&quot;,\&quot;/app/src/main/java/com/lostpawsconnect/dogmobileapp/fragments/NotificationFragment.java\&quot;:\&quot;This Java file defines a Fragment class called NotificationFragment.\\n\\nKey things it does:\\n\\n- It extends the Fragment class from the Android support library, making it an Android fragment.\\n\\n- It inflates a layout defined in fragment_notification.xml using data binding. This layout will be the UI for the fragment.\\n\\n- It overrides the onCreateView method to return the inflated view. This is required for fragments.\\n\\n- It uses the FragmentNotificationBinding class generated from the XML layout to access views in the fragment layout.\\n\\n- No other logic is implemented yet, this is just the basic fragment class setup.\\n\\nKey functions:\\n\\n- onCreateView - Required method that inflates and returns the fragment view.\\n\\n- FragmentNotificationBinding - Used for data binding to access views in the fragment layout.\\n\\nSo in summary, this defines a basic Android fragment that will display a notification UI, by inflating a layout. Additional logic can now be added to populate/update the UI and handle user interactions.\&quot;,\&quot;/app/src/main/java/com/lostpawsconnect/dogmobileapp/parser/ResponseParser.java\&quot;:\&quot;This ResponseParser file is used to parse JSON response strings into Java objects.\\n\\nKey functions:\\n\\n- parseUser(T any) - Parses a generic object into a Users object if it is an instance of Users, otherwise returns null.\\n\\n- parseUser(String response) - Uses Gson to parse a JSON response string into a Users object. Gson is configured to map the JSON to the Users class using reflection. \\n\\n- It uses Gson, a popular Java library for parsing JSON, to deserialize the JSON response strings into Java objects of the appropriate type (Users in this case).\\n\\n- The main purpose is to take the raw JSON response from an API call and convert it into a strongly typed Users object that can then be easily used in the Java code. This avoids having to manually parse the JSON string.\\n\\nSo in summary, it provides helper methods to parse API response JSON into Java objects using Gson for easy object mapping between JSON and Java classes.\&quot;,\&quot;/app/src/main/java/com/lostpawsconnect/dogmobileapp/MissingDogDetailsActivity.java\&quot;:\&quot;This Java file defines an activity class called MissingDogDetailsActivity that displays details of a missing dog and allows the user to report the dog as found.\\n\\nKey functions:\\n\\n- onCreate(): Called when the activity is created. Initializes the binding and calls getData() to load dog details. Also sets up click listeners.\\n\\n- setListeners(): Sets a click listener for the \\\&quot;Report Missing\\\&quot; button that shows a confirmation dialog. \\n\\n- showConfirmationDialog(): Displays an alert dialog to confirm reporting the dog as found. Gets user input for remarks and calls reportMissing() if confirmed.\\n\\n- reportMissing(): Updates the dog document in Firestore to set the status to \\\&quot;found\\\&quot; and adds the remarks. Shows success/error toasts.\\n\\n- getData(): Parses the dog object from the intent extras and populates the UI fields like name, image, etc. Loads image using Picasso.\\n\\n- toMap(): Converts the dog object to a Map for storage in Firestore.\\n\\nThe activity allows viewing details of a missing dog, getting user confirmation before reporting it as found, and updating the dog document in the backend database (Firestore).\&quot;,\&quot;/app/src/main/res/drawable/ic_notif.xml\&quot;:\&quot;This XML file defines a vector drawable resource that can be used as an icon in an Android app.\\n\\nKey functions:\\n\\n- It defines a vector drawable with a viewport size of 24x24 dp. This sets the size of the icon.\\n\\n- It defines a single \\u003cpath\\u003e element that draws the outline of the notification icon. The pathData attribute defines the shape of the icon.\\n\\n- The fillColor attribute sets the interior of the path to white. \\n\\n- It can be assigned a color tint using the android:tint attribute, in this case black (#000000).\\n\\n- This vector drawable resource can then be referenced and used as an icon in the Android app, for example as a notification icon. It allows a scalable icon that can adapt to different screen densities.\\n\\n- Vector drawables are resolution-independent and can scale seamlessly across screen densities, making them preferable to bitmap icons for most uses in Android.\\n\\nSo in summary, this XML defines a scalable notification icon resource using vector graphics that can be referenced and used as an icon within the Android app.\&quot;,\&quot;/app/src/main/java/com/lostpawsconnect/dogmobileapp/fragments/ReportFragment.java\&quot;:\&quot;This ReportFragment file defines a Fragment class that is used to display a list of reported missing dogs for the logged in user.\\n\\nKey functions:\\n\\n- onCreateView: Inflates the fragment layout and loads the dog data from Firebase Firestore.\\n\\n- loadDataFirestore: Queries the Firebase Firestore \\\&quot;dogs_registered\\\&quot; collection to get all documents where the \\\&quot;userID\\\&quot; field matches the logged in user ID. Loops through the results and populates a Dogs list. \\n\\n- bindDataToView: Sets up a ReportAdapter to display the Dogs list in a RecyclerView. Passes a ReportListener for click handling.\\n\\n- ReportListener interface: Defines click listener methods that are implemented by the adapter.\\n\\n- ReportAdapter: Custom adapter that displays the dog data in the RecyclerView. Handles item clicks via the ReportListener. \\n\\n- Dogs model class: Represents a dog document retrieved from Firestore. Converts document data to/from a model object.\\n\\nThe purpose is to display a list of reported missing dogs for the current user, allowing them to view details of each dog report. Data is loaded asynchronously from Firestore and displayed using RecyclerView/Adapter pattern.\&quot;,\&quot;/app/src/main/python/plot.py\&quot;:\&quot;This Python file contains code to compare the visual similarity between two images from URLs.\\n\\nThe key functions are:\\n\\n- image_to_vector(): Takes an image and converts it to a vector representation by passing it through a pre-trained VGG16 CNN model. \\n\\n- compare_similarity(): Takes two image URLs, loads the images, converts them to vectors using image_to_vector(), and calculates the cosine similarity between the vectors as a measure of visual similarity.\\n\\n- load_image_from_url(): Loads an image from a URL by making an HTTP request and opening it as a PIL Image object.\\n\\nSo in summary, it provides functions to:\\n\\n1. Extract deep learning features/vectors from images\\n2. Calculate cosine similarity between image vectors \\n3. Load images from URLs\\n\\nThis allows comparing the visual similarity between two images located on the web by URL. The VGG16 model is used to extract semantic features before comparing similarity.\&quot;,\&quot;/app/src/main/res/menu/menu_dashboard.xml\&quot;:\&quot;This file defines the menu layout for the dashboard screen in the app.\\n\\nKey functions:\\n\\n- Defines a menu with items for navigation between fragments\\n- Each item has an ID, icon, title and order defined\\n- The items will show as action buttons at the bottom of the screen \\n- Items allow navigation to different fragments - HomeFragment, NotifFragment etc\\n- Settings item allows navigation to a Settings fragment\\n- Icon resources are referenced from the drawable folder\\n- Menu XML follows the Android menu structure with namespaces defined\\n\\nSo in summary, this menu layout defines the bottom navigation menu items that will allow navigation between different fragments/screens in the dashboard/home screen of the app. The items and their properties are defined to display consistently as action buttons.\&quot;,\&quot;/app/src/main/res/values-night/themes.xml\&quot;:\&quot;This file defines a night theme for the Android app.\\n\\nKey functions:\\n\\n- It is located in the res/values-night folder, which tells Android to use this theme configuration for night/dark mode.\\n\\n- It defines a style called Base.Theme.DogMobileApp that inherits from Theme.Material3.DayNight.NoActionBar. This sets the base theme to use Material Design 3 components and automatically switch between light and dark based on the system setting.\\n\\n- It allows customizing the dark theme by overriding properties like colorPrimary. In this example it is commented out but could be used to set a dark primary color. \\n\\n- By defining the night theme here, the app will automatically apply dark theme styling like dark colors, backgrounds, etc. when the device is in night/dark mode.\\n\\n- This separates the light and dark theme definitions so they can be customized independently as needed. The app will use this night theme configuration instead of the default one when in dark mode.\\n\\nSo in summary, it defines the night/dark theme for the app to automatically apply dark styling based on the system setting for night/dark mode.\&quot;}&quot;}" />
  </component>
</project>